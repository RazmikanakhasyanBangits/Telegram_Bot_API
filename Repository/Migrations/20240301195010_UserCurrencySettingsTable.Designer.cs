// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(ExchangeBotDbContext))]
    [Migration("20240301195010_UserCurrencySettingsTable")]
    partial class UserCurrencySettingsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repository.Entity.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("BankURL");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Repository.Entity.BankLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Repository.Entity.BotHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommandText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BotHistory", (string)null);
                });

            modelBuilder.Entity("Repository.Entity.ChatDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MessageExternalId")
                        .HasColumnType("bigint");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserActivityHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserActivityHistoryId");

                    b.ToTable("ChatDetails");
                });

            modelBuilder.Entity("Repository.Entity.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code")
                        .HasName("PK_Currencies_1");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Repository.Entity.RateModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<decimal>("BuyValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("FromCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("Iteration")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SellValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ToCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex(new[] { "FromCurrency" }, "IX_Rates_FromCurrency");

                    b.HasIndex(new[] { "ToCurrency" }, "IX_Rates_ToCurrency");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("Repository.Entity.UserActivityHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)2);

                    b.Property<short>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1);

                    b.Property<long>("UserExternalId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("UsersActivityHistories");
                });

            modelBuilder.Entity("Repository.Entity.UserCurrencySetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyFrom")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CurrencyTo")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<long>("UserActivityHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserActivityHistoryId");

                    b.ToTable("UserCurrencySettings");
                });

            modelBuilder.Entity("Repository.Entity.UserRole", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreationDate = new DateTime(2024, 3, 1, 23, 50, 10, 559, DateTimeKind.Local).AddTicks(4595),
                            DeletionDate = new DateTime(2024, 3, 1, 19, 50, 10, 559, DateTimeKind.Utc).AddTicks(4596),
                            LastUpdatedDate = new DateTime(2024, 3, 1, 19, 50, 10, 559, DateTimeKind.Utc).AddTicks(4595),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = (short)2,
                            CreationDate = new DateTime(2024, 3, 1, 23, 50, 10, 559, DateTimeKind.Local).AddTicks(4615),
                            DeletionDate = new DateTime(2024, 3, 1, 19, 50, 10, 559, DateTimeKind.Utc).AddTicks(4615),
                            LastUpdatedDate = new DateTime(2024, 3, 1, 19, 50, 10, 559, DateTimeKind.Utc).AddTicks(4615),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Repository.Entity.UserStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserStatus");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreationDate = new DateTime(2024, 3, 1, 23, 50, 10, 559, DateTimeKind.Local).AddTicks(4253),
                            DeletionDate = new DateTime(2024, 3, 1, 19, 50, 10, 559, DateTimeKind.Utc).AddTicks(4264),
                            LastUpdatedDate = new DateTime(2024, 3, 1, 19, 50, 10, 559, DateTimeKind.Utc).AddTicks(4263),
                            Name = "Active"
                        },
                        new
                        {
                            Id = (short)2,
                            CreationDate = new DateTime(2024, 3, 1, 23, 50, 10, 559, DateTimeKind.Local).AddTicks(4407),
                            DeletionDate = new DateTime(2024, 3, 1, 19, 50, 10, 559, DateTimeKind.Utc).AddTicks(4408),
                            LastUpdatedDate = new DateTime(2024, 3, 1, 19, 50, 10, 559, DateTimeKind.Utc).AddTicks(4408),
                            Name = "Blocked"
                        });
                });

            modelBuilder.Entity("Repository.Entity.BankLocation", b =>
                {
                    b.HasOne("Repository.Entity.Bank", "Bank")
                        .WithMany("Locations")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Repository.Entity.ChatDetail", b =>
                {
                    b.HasOne("Repository.Entity.UserActivityHistory", "UsersActivityHistory")
                        .WithMany("ChatDetails")
                        .HasForeignKey("UserActivityHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsersActivityHistory");
                });

            modelBuilder.Entity("Repository.Entity.RateModel", b =>
                {
                    b.HasOne("Repository.Entity.Bank", "Bank")
                        .WithMany("Rates")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_Rates_Banks");

                    b.HasOne("Repository.Entity.Currency", "FromCurrencyNavigation")
                        .WithMany("RateFromCurrencyNavigations")
                        .HasForeignKey("FromCurrency")
                        .IsRequired()
                        .HasConstraintName("FK_Rates_Currencies");

                    b.HasOne("Repository.Entity.Currency", "ToCurrencyNavigation")
                        .WithMany("RateToCurrencyNavigations")
                        .HasForeignKey("ToCurrency")
                        .IsRequired()
                        .HasConstraintName("FK_Rates_Currencies1");

                    b.Navigation("Bank");

                    b.Navigation("FromCurrencyNavigation");

                    b.Navigation("ToCurrencyNavigation");
                });

            modelBuilder.Entity("Repository.Entity.UserActivityHistory", b =>
                {
                    b.HasOne("Repository.Entity.UserRole", "Role")
                        .WithMany("UserActivities")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entity.UserStatus", "Status")
                        .WithMany("UserActivities")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Repository.Entity.UserCurrencySetting", b =>
                {
                    b.HasOne("Repository.Entity.UserActivityHistory", "UserActivityHistory")
                        .WithMany("UserCurrencySettings")
                        .HasForeignKey("UserActivityHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserActivityHistory");
                });

            modelBuilder.Entity("Repository.Entity.Bank", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("Repository.Entity.Currency", b =>
                {
                    b.Navigation("RateFromCurrencyNavigations");

                    b.Navigation("RateToCurrencyNavigations");
                });

            modelBuilder.Entity("Repository.Entity.UserActivityHistory", b =>
                {
                    b.Navigation("ChatDetails");

                    b.Navigation("UserCurrencySettings");
                });

            modelBuilder.Entity("Repository.Entity.UserRole", b =>
                {
                    b.Navigation("UserActivities");
                });

            modelBuilder.Entity("Repository.Entity.UserStatus", b =>
                {
                    b.Navigation("UserActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
